type Factory @entity {
  id: ID!
  owner: ID!
}

type UnderlyingToken @entity {
  id: ID!
  name: String!
  decimals: BigInt!
}

type RateOracle @entity {
  id: ID!
  protocolId: BigInt!
  token: UnderlyingToken!

  minSecondsSinceLastUpdate: BigInt!
  rateCardinalityNext: Int!

  rateOracleUpdateCount: BigInt!
  rateUpdates: [RateOracleUpdate!]! @derivedFrom(field: "rateOracle")
}

type RateOracleUpdate @entity {
  id: ID!
  rateOracle: RateOracle!

  updateTimestamp: BigInt!
  observationIndex: Int!
  blockTimestamp: BigInt!
  resultRay: BigInt!
  cardinality: Int!
  cardinalityNext: Int!
}

type MarginEngine @entity {
  id: ID!
  amm: AMM!
  mcpCount: BigInt!
  marginCalculatorParameters: MarginCalculatorParameters!
}

type MarginCalculatorParameters @entity {
  id: ID!

  apyUpperMultiplierWad: BigInt!
  apyLowerMultiplierWad: BigInt!
  sigmaSquaredWad: BigInt!
  alphaWad: BigInt!
  betaWad: BigInt!
  xiUpperWad: BigInt!
  xiLowerWad: BigInt!
  tMaxWad: BigInt!
  devMulLeftUnwindLMWad: BigInt!
  devMulRightUnwindLMWad: BigInt!
  devMulLeftUnwindIMWad: BigInt!
  devMulRightUnwindIMWad: BigInt!
  fixedRateDeviationMinLeftUnwindLMWad: BigInt!
  fixedRateDeviationMinRightUnwindLMWad: BigInt!
  fixedRateDeviationMinLeftUnwindIMWad: BigInt!
  fixedRateDeviationMinRightUnwindIMWad: BigInt!
  gammaWad: BigInt!
  minMarginToIncentiviseLiquidators: BigInt!
}


type FCM @entity {
  id: ID!
  amm: AMM!
}

type AMM @entity {
  id: ID!
  createdTimestamp: BigInt!

  fcm: FCM!
  marginEngine: MarginEngine!
  rateOracle: RateOracle!

  tickSpacing: BigInt!
  termStartTimestamp: BigInt!
  termEndTimestamp: BigInt!

  totalNotionalTraded: BigInt!
  totalLiquidity: BigInt!

  updatedTimestamp: BigInt!
  tick: BigInt!

  txCount: BigInt!

  mints:         [Mint!]!          @derivedFrom(field: "amm")
  burns:         [Burn!]!          @derivedFrom(field: "amm")
  swaps:         [Swap!]!          @derivedFrom(field: "amm")
  marginUpdates: [MarginUpdate!]!  @derivedFrom(field: "amm")
  liquidations:  [Liquidation!]!   @derivedFrom(field: "amm")
  settlements:   [Settlement!]!    @derivedFrom(field: "amm")
}

type Wallet @entity {
  id: ID!

  positions: [Position!]! @derivedFrom(field: "owner")
  positionCount: BigInt!

  fcmPositions: [FCMPosition!]! @derivedFrom(field: "owner")
  fcmPositionCount: BigInt!
}

type Position @entity {
  id: ID!
  createdTimestamp: BigInt!
  amm: AMM!

  owner: Wallet!
  tickLower: BigInt!
  tickUpper: BigInt!

  updatedTimestamp: BigInt!

  liquidity: BigInt!
  margin: BigInt!
  fixedTokenBalance: BigInt!
  variableTokenBalance: BigInt!
  accumulatedFees: BigInt!

  totalNotionalTraded: BigInt!
  sumOfWeightedFixedRate: BigInt!

  positionType: BigInt!
  isSettled: Boolean!

  mints:         [Mint!]!             @derivedFrom(field: "position")
  burns:         [Burn!]!             @derivedFrom(field: "position")
  swaps:         [Swap!]!             @derivedFrom(field: "position")
  marginUpdates: [MarginUpdate!]!     @derivedFrom(field: "position")
  liquidations:  [Liquidation!]!      @derivedFrom(field: "position")
  settlements:   [Settlement!]!       @derivedFrom(field: "position")
  snapshots:     [PositionSnapshot!]! @derivedFrom(field: "position")
  snapshotCount: BigInt!
}

type PositionSnapshot @entity {
  id: ID!
  createdTimestamp: BigInt!
  position: Position!

  liquidity: BigInt!
  margin: BigInt!
  fixedTokenBalance: BigInt!
  variableTokenBalance: BigInt!
  accumulatedFees: BigInt!

  totalNotionalTraded: BigInt!
  sumOfWeightedFixedRate: BigInt!

  positionType: BigInt!
  isSettled: Boolean!
}

# Event tracking
type Transaction @entity {
  id: ID!
  amm: AMM!
  blockNumber: BigInt!
  createdTimestamp: BigInt!
  gasPrice: BigInt!

  mints:         [Mint!]!             @derivedFrom(field: "transaction")
  burns:         [Burn!]!             @derivedFrom(field: "transaction")
  swaps:         [Swap!]!             @derivedFrom(field: "transaction")
  marginUpdates: [MarginUpdate!]!     @derivedFrom(field: "transaction")
  liquidations:  [Liquidation!]!      @derivedFrom(field: "transaction")
  settlements:   [Settlement!]!       @derivedFrom(field: "transaction")
}

type Mint @entity {
  id: ID!
  transaction: Transaction!

  amm: AMM!
  position: Position!

  sender: String!
  amount: BigInt!
}

type Burn @entity {
  id: ID!
  transaction: Transaction!

  amm: AMM!
  position: Position!

  sender: String!
  amount: BigInt!
}

type Swap @entity {
  id: ID!
  transaction: Transaction!

  amm: AMM!
  position: Position!

  sender: String!
  desiredNotional: BigInt!
  sqrtPriceLimitX96: BigInt!
  cumulativeFeeIncurred: BigInt!
  fixedTokenDelta: BigInt!
  variableTokenDelta: BigInt!
  fixedTokenDeltaUnbalanced: BigInt!
}

type Liquidation @entity {
  id: ID!
  transaction: Transaction!

  amm: AMM!
  position: Position!

  liquidator: String!
  reward: BigInt!
  notionalUnwound: BigInt!
}

type Settlement @entity {
  id: ID!
  transaction: Transaction!

  amm: AMM!
  position: Position!

  settlementCashflow: BigInt!
}

type MarginUpdate @entity {
  id: ID!
  transaction: Transaction!

  amm: AMM!
  position: Position!

  depositer: String!
  marginDelta: BigInt!
}

type FCMPosition @entity {
  id: ID!
  createdTimestamp: BigInt!
  amm: AMM!

  owner: Wallet!

  updatedTimestamp: BigInt!

  fixedTokenBalance: BigInt!
  variableTokenBalance: BigInt!
  marginInScaledYieldBearingTokens: BigInt!

  totalNotionalTraded: BigInt!
  sumOfWeightedFixedRate: BigInt!
  
  isSettled: Boolean!

  fcmSwaps:       [FCMSwap!]!             @derivedFrom(field: "fcmPosition")
  fcmUnwinds:     [FCMUnwind!]!           @derivedFrom(field: "fcmPosition")
  fcmSettlements: [FCMSettlement!]!       @derivedFrom(field: "fcmPosition")
  snapshots:      [FCMPositionSnapshot!]! @derivedFrom(field: "fcmPosition")
  snapshotCount: BigInt!
}

type FCMPositionSnapshot @entity {
  id: ID!
  createdTimestamp: BigInt!
  fcmPosition: FCMPosition!

  fixedTokenBalance: BigInt!
  variableTokenBalance: BigInt!
  marginInScaledYieldBearingTokens: BigInt!

  totalNotionalTraded: BigInt!
  sumOfWeightedFixedRate: BigInt!
  
  isSettled: Boolean!
}

type FCMSwap @entity {
  id: ID!
  transaction: Transaction!

  amm: AMM!
  fcmPosition: FCMPosition!

  desiredNotional: BigInt!
  sqrtPriceLimitX96: BigInt!
  cumulativeFeeIncurred: BigInt!
  fixedTokenDelta: BigInt!
  variableTokenDelta: BigInt!
  fixedTokenDeltaUnbalanced: BigInt!
}

type FCMUnwind @entity {
  id: ID!
  transaction: Transaction!

  amm: AMM!
  fcmPosition: FCMPosition!

  desiredNotional: BigInt!
  sqrtPriceLimitX96: BigInt!
  cumulativeFeeIncurred: BigInt!
  fixedTokenDelta: BigInt!
  variableTokenDelta: BigInt!
  fixedTokenDeltaUnbalanced: BigInt!
}

type FCMSettlement @entity {
  id: ID!
  transaction: Transaction!

  amm: AMM!
  fcmPosition: FCMPosition!

  settlementCashflow: BigInt!
}