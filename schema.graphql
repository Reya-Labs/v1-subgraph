# First-class objects
type Factory @entity {
  # factory address
  id: ID!

  owner: ID!
}

type UnderlyingToken @entity {
  # token address
  id: ID!

  name: String!
}

type RateOracle @entity {
  id: ID!
  token: UnderlyingToken!
}

type AMM @entity {
  # actually the address of the VAMM
  id: ID!

  createdTimestamp: BigInt!
  updatedTimestamp: BigInt!
  marginEngineAddress: String!
  fcmAddress: String!
  rateOracle: RateOracle!
  termStartTimestamp: BigInt!
  termEndTimestamp: BigInt!
  tickSpacing: BigInt!
  fixedApr: BigInt
  variableApr: BigInt

  # tracking attributes
  txCount: BigInt

  # derived values
  mints: [Mint!]! @derivedFrom(field: "amm")
  burns: [Burn!]! @derivedFrom(field: "amm")
  swaps: [Swap!]! @derivedFrom(field: "amm")
}

type Tick @entity {
  # format: <amm>#<tick value>
  id: ID!

  amm: AMM!
  value: BigInt!
}

type Position @entity {
  # format: <owner>#<tickLower>#<tickUpper>
  id: ID!

  createdTimestamp: BigInt!
  updatedTimestamp: BigInt!
  closedTimestamp: BigInt!

  amm: AMM!

  # owner of the position
  owner: String!

  # lower tick of the position
  tickLower: Tick!
  # upper tick of the position
  tickUpper: Tick!
  # total position liquidity
  liquidity: BigInt!
  # total position margin
  margin: BigInt!

  # derived values
  mints: [Mint!]! @derivedFrom(field: "position")
  burns: [Burn!]! @derivedFrom(field: "position")
  swaps: [Swap!]! @derivedFrom(field: "position")
}

# Event tracking
type Transaction @entity {
  # transaction hash
  id: ID!
  # block transaction was included in
  blockNumber: BigInt!
  # timestamp transaction was confirmed
  timestamp: BigInt!
  # gas used during transaction execution
  gasPrice: BigInt!

  # derived values
  mints: [Mint!]! @derivedFrom(field: "transaction")
  burns: [Burn!]! @derivedFrom(field: "transaction")
  swaps: [Swap!]! @derivedFrom(field: "transaction")
}

type Mint @entity {
  # transaction hash + "#" + index in mints Transaction array
  id: ID!

  transaction: Transaction!

  # Get from transaction
  amm: AMM!
  position: Position!

  # Passed with Mint event
  sender: String!
  tickLower: Tick!
  tickUpper: Tick!
  amount: BigInt!
}

type Burn @entity {
  # format: <transaction hash>#<index in burns Transaction array>
  id: ID!

  transaction: Transaction!
  amm: AMM!
  position: Position!
  sender: String!

  # Passed with Burn event
  tickLower: Tick!
  tickUpper: Tick!
  amount: BigInt!
}

type Swap @entity {
  # format: <transaction hash>#<index in burns Transaction array>
  id: ID!

  transaction: Transaction!
  amm: AMM!
  sender: String!

  # Get from recipient
  position: Position!

  # index within the txn
  txIndex: BigInt!

  sqrtPriceX96: BigInt!
}
