// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class FCMTraderUpdate extends ethereum.Event {
  get params(): FCMTraderUpdate__Params {
    return new FCMTraderUpdate__Params(this);
  }
}

export class FCMTraderUpdate__Params {
  _event: FCMTraderUpdate;

  constructor(event: FCMTraderUpdate) {
    this._event = event;
  }

  get trader(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get marginInScaledYieldBearingTokens(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get fixedTokenBalance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get variableTokenBalance(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class FullyCollateralisedSwap extends ethereum.Event {
  get params(): FullyCollateralisedSwap__Params {
    return new FullyCollateralisedSwap__Params(this);
  }
}

export class FullyCollateralisedSwap__Params {
  _event: FullyCollateralisedSwap;

  constructor(event: FullyCollateralisedSwap) {
    this._event = event;
  }

  get trader(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get desiredNotional(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get sqrtPriceLimitX96(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get cumulativeFeeIncurred(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get fixedTokenDelta(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get variableTokenDelta(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get fixedTokenDeltaUnbalanced(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class FullyCollateralisedUnwind extends ethereum.Event {
  get params(): FullyCollateralisedUnwind__Params {
    return new FullyCollateralisedUnwind__Params(this);
  }
}

export class FullyCollateralisedUnwind__Params {
  _event: FullyCollateralisedUnwind;

  constructor(event: FullyCollateralisedUnwind) {
    this._event = event;
  }

  get trader(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get desiredNotional(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get sqrtPriceLimitX96(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get cumulativeFeeIncurred(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get fixedTokenDelta(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get variableTokenDelta(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get fixedTokenDeltaUnbalanced(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class fcmPositionSettlement extends ethereum.Event {
  get params(): fcmPositionSettlement__Params {
    return new fcmPositionSettlement__Params(this);
  }
}

export class fcmPositionSettlement__Params {
  _event: fcmPositionSettlement;

  constructor(event: fcmPositionSettlement) {
    this._event = event;
  }

  get trader(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get settlementCashflow(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class BaseFCM__getTraderWithYieldBearingAssetsResultTraderInfoStruct extends ethereum.Tuple {
  get marginInScaledYieldBearingTokens(): BigInt {
    return this[0].toBigInt();
  }

  get fixedTokenBalance(): BigInt {
    return this[1].toBigInt();
  }

  get variableTokenBalance(): BigInt {
    return this[2].toBigInt();
  }

  get isSettled(): boolean {
    return this[3].toBoolean();
  }
}

export class BaseFCM__initiateFullyCollateralisedFixedTakerSwapResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromSignedBigInt(this.value3));
    return map;
  }
}

export class BaseFCM__tradersResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: boolean;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromSignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }
}

export class BaseFCM__unwindFullyCollateralisedFixedTakerSwapResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromSignedBigInt(this.value3));
    return map;
  }
}

export class BaseFCM extends ethereum.SmartContract {
  static bind(address: Address): BaseFCM {
    return new BaseFCM("BaseFCM", address);
  }

  getTraderWithYieldBearingAssets(
    trader: Address
  ): BaseFCM__getTraderWithYieldBearingAssetsResultTraderInfoStruct {
    let result = super.call(
      "getTraderWithYieldBearingAssets",
      "getTraderWithYieldBearingAssets(address):((uint256,int256,int256,bool))",
      [ethereum.Value.fromAddress(trader)]
    );

    return changetype<
      BaseFCM__getTraderWithYieldBearingAssetsResultTraderInfoStruct
    >(result[0].toTuple());
  }

  try_getTraderWithYieldBearingAssets(
    trader: Address
  ): ethereum.CallResult<
    BaseFCM__getTraderWithYieldBearingAssetsResultTraderInfoStruct
  > {
    let result = super.tryCall(
      "getTraderWithYieldBearingAssets",
      "getTraderWithYieldBearingAssets(address):((uint256,int256,int256,bool))",
      [ethereum.Value.fromAddress(trader)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<
        BaseFCM__getTraderWithYieldBearingAssetsResultTraderInfoStruct
      >(value[0].toTuple())
    );
  }

  initiateFullyCollateralisedFixedTakerSwap(
    notional: BigInt,
    sqrtPriceLimitX96: BigInt
  ): BaseFCM__initiateFullyCollateralisedFixedTakerSwapResult {
    let result = super.call(
      "initiateFullyCollateralisedFixedTakerSwap",
      "initiateFullyCollateralisedFixedTakerSwap(uint256,uint160):(int256,int256,uint256,int256)",
      [
        ethereum.Value.fromUnsignedBigInt(notional),
        ethereum.Value.fromUnsignedBigInt(sqrtPriceLimitX96)
      ]
    );

    return new BaseFCM__initiateFullyCollateralisedFixedTakerSwapResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_initiateFullyCollateralisedFixedTakerSwap(
    notional: BigInt,
    sqrtPriceLimitX96: BigInt
  ): ethereum.CallResult<
    BaseFCM__initiateFullyCollateralisedFixedTakerSwapResult
  > {
    let result = super.tryCall(
      "initiateFullyCollateralisedFixedTakerSwap",
      "initiateFullyCollateralisedFixedTakerSwap(uint256,uint160):(int256,int256,uint256,int256)",
      [
        ethereum.Value.fromUnsignedBigInt(notional),
        ethereum.Value.fromUnsignedBigInt(sqrtPriceLimitX96)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BaseFCM__initiateFullyCollateralisedFixedTakerSwapResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  marginEngine(): Address {
    let result = super.call("marginEngine", "marginEngine():(address)", []);

    return result[0].toAddress();
  }

  try_marginEngine(): ethereum.CallResult<Address> {
    let result = super.tryCall("marginEngine", "marginEngine():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  rateOracle(): Address {
    let result = super.call("rateOracle", "rateOracle():(address)", []);

    return result[0].toAddress();
  }

  try_rateOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("rateOracle", "rateOracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  settleTrader(): BigInt {
    let result = super.call("settleTrader", "settleTrader():(int256)", []);

    return result[0].toBigInt();
  }

  try_settleTrader(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("settleTrader", "settleTrader():(int256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  traders(param0: Address): BaseFCM__tradersResult {
    let result = super.call(
      "traders",
      "traders(address):(uint256,int256,int256,bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new BaseFCM__tradersResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBoolean()
    );
  }

  try_traders(param0: Address): ethereum.CallResult<BaseFCM__tradersResult> {
    let result = super.tryCall(
      "traders",
      "traders(address):(uint256,int256,int256,bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BaseFCM__tradersResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBoolean()
      )
    );
  }

  underlyingToken(): Address {
    let result = super.call(
      "underlyingToken",
      "underlyingToken():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_underlyingToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "underlyingToken",
      "underlyingToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  unwindFullyCollateralisedFixedTakerSwap(
    notionalToUnwind: BigInt,
    sqrtPriceLimitX96: BigInt
  ): BaseFCM__unwindFullyCollateralisedFixedTakerSwapResult {
    let result = super.call(
      "unwindFullyCollateralisedFixedTakerSwap",
      "unwindFullyCollateralisedFixedTakerSwap(uint256,uint160):(int256,int256,uint256,int256)",
      [
        ethereum.Value.fromUnsignedBigInt(notionalToUnwind),
        ethereum.Value.fromUnsignedBigInt(sqrtPriceLimitX96)
      ]
    );

    return new BaseFCM__unwindFullyCollateralisedFixedTakerSwapResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_unwindFullyCollateralisedFixedTakerSwap(
    notionalToUnwind: BigInt,
    sqrtPriceLimitX96: BigInt
  ): ethereum.CallResult<
    BaseFCM__unwindFullyCollateralisedFixedTakerSwapResult
  > {
    let result = super.tryCall(
      "unwindFullyCollateralisedFixedTakerSwap",
      "unwindFullyCollateralisedFixedTakerSwap(uint256,uint160):(int256,int256,uint256,int256)",
      [
        ethereum.Value.fromUnsignedBigInt(notionalToUnwind),
        ethereum.Value.fromUnsignedBigInt(sqrtPriceLimitX96)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BaseFCM__unwindFullyCollateralisedFixedTakerSwapResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  vamm(): Address {
    let result = super.call("vamm", "vamm():(address)", []);

    return result[0].toAddress();
  }

  try_vamm(): ethereum.CallResult<Address> {
    let result = super.tryCall("vamm", "vamm():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get __vamm(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get __marginEngine(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitiateFullyCollateralisedFixedTakerSwapCall extends ethereum.Call {
  get inputs(): InitiateFullyCollateralisedFixedTakerSwapCall__Inputs {
    return new InitiateFullyCollateralisedFixedTakerSwapCall__Inputs(this);
  }

  get outputs(): InitiateFullyCollateralisedFixedTakerSwapCall__Outputs {
    return new InitiateFullyCollateralisedFixedTakerSwapCall__Outputs(this);
  }
}

export class InitiateFullyCollateralisedFixedTakerSwapCall__Inputs {
  _call: InitiateFullyCollateralisedFixedTakerSwapCall;

  constructor(call: InitiateFullyCollateralisedFixedTakerSwapCall) {
    this._call = call;
  }

  get notional(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get sqrtPriceLimitX96(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class InitiateFullyCollateralisedFixedTakerSwapCall__Outputs {
  _call: InitiateFullyCollateralisedFixedTakerSwapCall;

  constructor(call: InitiateFullyCollateralisedFixedTakerSwapCall) {
    this._call = call;
  }

  get fixedTokenDelta(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get variableTokenDelta(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get cumulativeFeeIncurred(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }

  get fixedTokenDeltaUnbalanced(): BigInt {
    return this._call.outputValues[3].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetPausabilityCall extends ethereum.Call {
  get inputs(): SetPausabilityCall__Inputs {
    return new SetPausabilityCall__Inputs(this);
  }

  get outputs(): SetPausabilityCall__Outputs {
    return new SetPausabilityCall__Outputs(this);
  }
}

export class SetPausabilityCall__Inputs {
  _call: SetPausabilityCall;

  constructor(call: SetPausabilityCall) {
    this._call = call;
  }

  get state(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetPausabilityCall__Outputs {
  _call: SetPausabilityCall;

  constructor(call: SetPausabilityCall) {
    this._call = call;
  }
}

export class SettleTraderCall extends ethereum.Call {
  get inputs(): SettleTraderCall__Inputs {
    return new SettleTraderCall__Inputs(this);
  }

  get outputs(): SettleTraderCall__Outputs {
    return new SettleTraderCall__Outputs(this);
  }
}

export class SettleTraderCall__Inputs {
  _call: SettleTraderCall;

  constructor(call: SettleTraderCall) {
    this._call = call;
  }
}

export class SettleTraderCall__Outputs {
  _call: SettleTraderCall;

  constructor(call: SettleTraderCall) {
    this._call = call;
  }

  get traderSettlementCashflow(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferMarginToMarginEngineTraderCall extends ethereum.Call {
  get inputs(): TransferMarginToMarginEngineTraderCall__Inputs {
    return new TransferMarginToMarginEngineTraderCall__Inputs(this);
  }

  get outputs(): TransferMarginToMarginEngineTraderCall__Outputs {
    return new TransferMarginToMarginEngineTraderCall__Outputs(this);
  }
}

export class TransferMarginToMarginEngineTraderCall__Inputs {
  _call: TransferMarginToMarginEngineTraderCall;

  constructor(call: TransferMarginToMarginEngineTraderCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get marginDeltaInUnderlyingTokens(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferMarginToMarginEngineTraderCall__Outputs {
  _call: TransferMarginToMarginEngineTraderCall;

  constructor(call: TransferMarginToMarginEngineTraderCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnwindFullyCollateralisedFixedTakerSwapCall extends ethereum.Call {
  get inputs(): UnwindFullyCollateralisedFixedTakerSwapCall__Inputs {
    return new UnwindFullyCollateralisedFixedTakerSwapCall__Inputs(this);
  }

  get outputs(): UnwindFullyCollateralisedFixedTakerSwapCall__Outputs {
    return new UnwindFullyCollateralisedFixedTakerSwapCall__Outputs(this);
  }
}

export class UnwindFullyCollateralisedFixedTakerSwapCall__Inputs {
  _call: UnwindFullyCollateralisedFixedTakerSwapCall;

  constructor(call: UnwindFullyCollateralisedFixedTakerSwapCall) {
    this._call = call;
  }

  get notionalToUnwind(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get sqrtPriceLimitX96(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UnwindFullyCollateralisedFixedTakerSwapCall__Outputs {
  _call: UnwindFullyCollateralisedFixedTakerSwapCall;

  constructor(call: UnwindFullyCollateralisedFixedTakerSwapCall) {
    this._call = call;
  }

  get fixedTokenDelta(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get variableTokenDelta(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get cumulativeFeeIncurred(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }

  get fixedTokenDeltaUnbalanced(): BigInt {
    return this._call.outputValues[3].value.toBigInt();
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
