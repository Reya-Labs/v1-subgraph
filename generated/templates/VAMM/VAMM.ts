// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Burn extends ethereum.Event {
  get params(): Burn__Params {
    return new Burn__Params(this);
  }
}

export class Burn__Params {
  _event: Burn;

  constructor(event: Burn) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tickLower(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get tickUpper(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Fee extends ethereum.Event {
  get params(): Fee__Params {
    return new Fee__Params(this);
  }
}

export class Fee__Params {
  _event: Fee;

  constructor(event: Fee) {
    this._event = event;
  }

  get feeWad(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class FeeProtocol extends ethereum.Event {
  get params(): FeeProtocol__Params {
    return new FeeProtocol__Params(this);
  }
}

export class FeeProtocol__Params {
  _event: FeeProtocol;

  constructor(event: FeeProtocol) {
    this._event = event;
  }

  get feeProtocol(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class IsAlpha extends ethereum.Event {
  get params(): IsAlpha__Params {
    return new IsAlpha__Params(this);
  }
}

export class IsAlpha__Params {
  _event: IsAlpha;

  constructor(event: IsAlpha) {
    this._event = event;
  }

  get __isAlpha(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tickLower(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get tickUpper(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Swap extends ethereum.Event {
  get params(): Swap__Params {
    return new Swap__Params(this);
  }
}

export class Swap__Params {
  _event: Swap;

  constructor(event: Swap) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tickLower(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get tickUpper(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get desiredNotional(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get sqrtPriceLimitX96(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get cumulativeFeeIncurred(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get fixedTokenDelta(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get variableTokenDelta(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get fixedTokenDeltaUnbalanced(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class VAMMInitialization extends ethereum.Event {
  get params(): VAMMInitialization__Params {
    return new VAMMInitialization__Params(this);
  }
}

export class VAMMInitialization__Params {
  _event: VAMMInitialization;

  constructor(event: VAMMInitialization) {
    this._event = event;
  }

  get sqrtPriceX96(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tick(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class VAMMPriceChange extends ethereum.Event {
  get params(): VAMMPriceChange__Params {
    return new VAMMPriceChange__Params(this);
  }
}

export class VAMMPriceChange__Params {
  _event: VAMMPriceChange;

  constructor(event: VAMMPriceChange) {
    this._event = event;
  }

  get tick(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class VAMM__computeGrowthInsideResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class VAMM__swapResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromSignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromSignedBigInt(this.value4));
    return map;
  }
}

export class VAMM__swapInputParamsStruct extends ethereum.Tuple {
  get recipient(): Address {
    return this[0].toAddress();
  }

  get amountSpecified(): BigInt {
    return this[1].toBigInt();
  }

  get sqrtPriceLimitX96(): BigInt {
    return this[2].toBigInt();
  }

  get tickLower(): i32 {
    return this[3].toI32();
  }

  get tickUpper(): i32 {
    return this[4].toI32();
  }
}

export class VAMM__ticksResultValue0Struct extends ethereum.Tuple {
  get liquidityGross(): BigInt {
    return this[0].toBigInt();
  }

  get liquidityNet(): BigInt {
    return this[1].toBigInt();
  }

  get fixedTokenGrowthOutsideX128(): BigInt {
    return this[2].toBigInt();
  }

  get variableTokenGrowthOutsideX128(): BigInt {
    return this[3].toBigInt();
  }

  get feeGrowthOutsideX128(): BigInt {
    return this[4].toBigInt();
  }

  get initialized(): boolean {
    return this[5].toBoolean();
  }
}

export class VAMM__vammVarsResultValue0Struct extends ethereum.Tuple {
  get sqrtPriceX96(): BigInt {
    return this[0].toBigInt();
  }

  get tick(): i32 {
    return this[1].toI32();
  }

  get feeProtocol(): i32 {
    return this[2].toI32();
  }
}

export class VAMM extends ethereum.SmartContract {
  static bind(address: Address): VAMM {
    return new VAMM("VAMM", address);
  }

  MAX_FEE(): BigInt {
    let result = super.call("MAX_FEE", "MAX_FEE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_FEE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_FEE", "MAX_FEE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  VOLTZ_PAUSER(): Bytes {
    let result = super.call("VOLTZ_PAUSER", "VOLTZ_PAUSER():(bytes32)", []);

    return result[0].toBytes();
  }

  try_VOLTZ_PAUSER(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("VOLTZ_PAUSER", "VOLTZ_PAUSER():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  burn(
    recipient: Address,
    tickLower: i32,
    tickUpper: i32,
    amount: BigInt
  ): BigInt {
    let result = super.call(
      "burn",
      "burn(address,int24,int24,uint128):(int256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromI32(tickLower),
        ethereum.Value.fromI32(tickUpper),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_burn(
    recipient: Address,
    tickLower: i32,
    tickUpper: i32,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "burn",
      "burn(address,int24,int24,uint128):(int256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromI32(tickLower),
        ethereum.Value.fromI32(tickUpper),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  computeGrowthInside(
    tickLower: i32,
    tickUpper: i32
  ): VAMM__computeGrowthInsideResult {
    let result = super.call(
      "computeGrowthInside",
      "computeGrowthInside(int24,int24):(int256,int256,uint256)",
      [ethereum.Value.fromI32(tickLower), ethereum.Value.fromI32(tickUpper)]
    );

    return new VAMM__computeGrowthInsideResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_computeGrowthInside(
    tickLower: i32,
    tickUpper: i32
  ): ethereum.CallResult<VAMM__computeGrowthInsideResult> {
    let result = super.tryCall(
      "computeGrowthInside",
      "computeGrowthInside(int24,int24):(int256,int256,uint256)",
      [ethereum.Value.fromI32(tickLower), ethereum.Value.fromI32(tickUpper)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new VAMM__computeGrowthInsideResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  feeGrowthGlobalX128(): BigInt {
    let result = super.call(
      "feeGrowthGlobalX128",
      "feeGrowthGlobalX128():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_feeGrowthGlobalX128(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "feeGrowthGlobalX128",
      "feeGrowthGlobalX128():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeWad(): BigInt {
    let result = super.call("feeWad", "feeWad():(uint256)", []);

    return result[0].toBigInt();
  }

  try_feeWad(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("feeWad", "feeWad():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fixedTokenGrowthGlobalX128(): BigInt {
    let result = super.call(
      "fixedTokenGrowthGlobalX128",
      "fixedTokenGrowthGlobalX128():(int256)",
      []
    );

    return result[0].toBigInt();
  }

  try_fixedTokenGrowthGlobalX128(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "fixedTokenGrowthGlobalX128",
      "fixedTokenGrowthGlobalX128():(int256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRateOracle(): Address {
    let result = super.call("getRateOracle", "getRateOracle():(address)", []);

    return result[0].toAddress();
  }

  try_getRateOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRateOracle",
      "getRateOracle():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isAlpha(): boolean {
    let result = super.call("isAlpha", "isAlpha():(bool)", []);

    return result[0].toBoolean();
  }

  try_isAlpha(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isAlpha", "isAlpha():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  liquidity(): BigInt {
    let result = super.call("liquidity", "liquidity():(uint128)", []);

    return result[0].toBigInt();
  }

  try_liquidity(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("liquidity", "liquidity():(uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  marginEngine(): Address {
    let result = super.call("marginEngine", "marginEngine():(address)", []);

    return result[0].toAddress();
  }

  try_marginEngine(): ethereum.CallResult<Address> {
    let result = super.tryCall("marginEngine", "marginEngine():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  maxLiquidityPerTick(): BigInt {
    let result = super.call(
      "maxLiquidityPerTick",
      "maxLiquidityPerTick():(uint128)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxLiquidityPerTick(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxLiquidityPerTick",
      "maxLiquidityPerTick():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mint(
    recipient: Address,
    tickLower: i32,
    tickUpper: i32,
    amount: BigInt
  ): BigInt {
    let result = super.call(
      "mint",
      "mint(address,int24,int24,uint128):(int256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromI32(tickLower),
        ethereum.Value.fromI32(tickUpper),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_mint(
    recipient: Address,
    tickLower: i32,
    tickUpper: i32,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mint",
      "mint(address,int24,int24,uint128):(int256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromI32(tickLower),
        ethereum.Value.fromI32(tickUpper),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  protocolFees(): BigInt {
    let result = super.call("protocolFees", "protocolFees():(uint256)", []);

    return result[0].toBigInt();
  }

  try_protocolFees(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("protocolFees", "protocolFees():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  swap(params: VAMM__swapInputParamsStruct): VAMM__swapResult {
    let result = super.call(
      "swap",
      "swap((address,int256,uint160,int24,int24)):(int256,int256,uint256,int256,int256)",
      [ethereum.Value.fromTuple(params)]
    );

    return new VAMM__swapResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_swap(
    params: VAMM__swapInputParamsStruct
  ): ethereum.CallResult<VAMM__swapResult> {
    let result = super.tryCall(
      "swap",
      "swap((address,int256,uint160,int24,int24)):(int256,int256,uint256,int256,int256)",
      [ethereum.Value.fromTuple(params)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new VAMM__swapResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  tickBitmap(wordPosition: i32): BigInt {
    let result = super.call("tickBitmap", "tickBitmap(int16):(uint256)", [
      ethereum.Value.fromI32(wordPosition)
    ]);

    return result[0].toBigInt();
  }

  try_tickBitmap(wordPosition: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tickBitmap", "tickBitmap(int16):(uint256)", [
      ethereum.Value.fromI32(wordPosition)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tickSpacing(): i32 {
    let result = super.call("tickSpacing", "tickSpacing():(int24)", []);

    return result[0].toI32();
  }

  try_tickSpacing(): ethereum.CallResult<i32> {
    let result = super.tryCall("tickSpacing", "tickSpacing():(int24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  ticks(tick: i32): VAMM__ticksResultValue0Struct {
    let result = super.call(
      "ticks",
      "ticks(int24):((uint128,int128,int256,int256,uint256,bool))",
      [ethereum.Value.fromI32(tick)]
    );

    return changetype<VAMM__ticksResultValue0Struct>(result[0].toTuple());
  }

  try_ticks(tick: i32): ethereum.CallResult<VAMM__ticksResultValue0Struct> {
    let result = super.tryCall(
      "ticks",
      "ticks(int24):((uint128,int128,int256,int256,uint256,bool))",
      [ethereum.Value.fromI32(tick)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<VAMM__ticksResultValue0Struct>(value[0].toTuple())
    );
  }

  vammVars(): VAMM__vammVarsResultValue0Struct {
    let result = super.call(
      "vammVars",
      "vammVars():((uint160,int24,uint8))",
      []
    );

    return changetype<VAMM__vammVarsResultValue0Struct>(result[0].toTuple());
  }

  try_vammVars(): ethereum.CallResult<VAMM__vammVarsResultValue0Struct> {
    let result = super.tryCall(
      "vammVars",
      "vammVars():((uint160,int24,uint8))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<VAMM__vammVarsResultValue0Struct>(value[0].toTuple())
    );
  }

  variableTokenGrowthGlobalX128(): BigInt {
    let result = super.call(
      "variableTokenGrowthGlobalX128",
      "variableTokenGrowthGlobalX128():(int256)",
      []
    );

    return result[0].toBigInt();
  }

  try_variableTokenGrowthGlobalX128(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "variableTokenGrowthGlobalX128",
      "variableTokenGrowthGlobalX128():(int256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tickLower(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get tickUpper(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get positionMarginRequirement(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ChangePauserCall extends ethereum.Call {
  get inputs(): ChangePauserCall__Inputs {
    return new ChangePauserCall__Inputs(this);
  }

  get outputs(): ChangePauserCall__Outputs {
    return new ChangePauserCall__Outputs(this);
  }
}

export class ChangePauserCall__Inputs {
  _call: ChangePauserCall;

  constructor(call: ChangePauserCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get permission(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class ChangePauserCall__Outputs {
  _call: ChangePauserCall;

  constructor(call: ChangePauserCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get __marginEngine(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get __tickSpacing(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeVAMMCall extends ethereum.Call {
  get inputs(): InitializeVAMMCall__Inputs {
    return new InitializeVAMMCall__Inputs(this);
  }

  get outputs(): InitializeVAMMCall__Outputs {
    return new InitializeVAMMCall__Outputs(this);
  }
}

export class InitializeVAMMCall__Inputs {
  _call: InitializeVAMMCall;

  constructor(call: InitializeVAMMCall) {
    this._call = call;
  }

  get sqrtPriceX96(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class InitializeVAMMCall__Outputs {
  _call: InitializeVAMMCall;

  constructor(call: InitializeVAMMCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tickLower(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get tickUpper(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get positionMarginRequirement(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RefreshRateOracleCall extends ethereum.Call {
  get inputs(): RefreshRateOracleCall__Inputs {
    return new RefreshRateOracleCall__Inputs(this);
  }

  get outputs(): RefreshRateOracleCall__Outputs {
    return new RefreshRateOracleCall__Outputs(this);
  }
}

export class RefreshRateOracleCall__Inputs {
  _call: RefreshRateOracleCall;

  constructor(call: RefreshRateOracleCall) {
    this._call = call;
  }
}

export class RefreshRateOracleCall__Outputs {
  _call: RefreshRateOracleCall;

  constructor(call: RefreshRateOracleCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetFeeCall extends ethereum.Call {
  get inputs(): SetFeeCall__Inputs {
    return new SetFeeCall__Inputs(this);
  }

  get outputs(): SetFeeCall__Outputs {
    return new SetFeeCall__Outputs(this);
  }
}

export class SetFeeCall__Inputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }

  get newFeeWad(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetFeeCall__Outputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }
}

export class SetFeeProtocolCall extends ethereum.Call {
  get inputs(): SetFeeProtocolCall__Inputs {
    return new SetFeeProtocolCall__Inputs(this);
  }

  get outputs(): SetFeeProtocolCall__Outputs {
    return new SetFeeProtocolCall__Outputs(this);
  }
}

export class SetFeeProtocolCall__Inputs {
  _call: SetFeeProtocolCall;

  constructor(call: SetFeeProtocolCall) {
    this._call = call;
  }

  get feeProtocol(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetFeeProtocolCall__Outputs {
  _call: SetFeeProtocolCall;

  constructor(call: SetFeeProtocolCall) {
    this._call = call;
  }
}

export class SetIsAlphaCall extends ethereum.Call {
  get inputs(): SetIsAlphaCall__Inputs {
    return new SetIsAlphaCall__Inputs(this);
  }

  get outputs(): SetIsAlphaCall__Outputs {
    return new SetIsAlphaCall__Outputs(this);
  }
}

export class SetIsAlphaCall__Inputs {
  _call: SetIsAlphaCall;

  constructor(call: SetIsAlphaCall) {
    this._call = call;
  }

  get __isAlpha(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetIsAlphaCall__Outputs {
  _call: SetIsAlphaCall;

  constructor(call: SetIsAlphaCall) {
    this._call = call;
  }
}

export class SetPausabilityCall extends ethereum.Call {
  get inputs(): SetPausabilityCall__Inputs {
    return new SetPausabilityCall__Inputs(this);
  }

  get outputs(): SetPausabilityCall__Outputs {
    return new SetPausabilityCall__Outputs(this);
  }
}

export class SetPausabilityCall__Inputs {
  _call: SetPausabilityCall;

  constructor(call: SetPausabilityCall) {
    this._call = call;
  }

  get state(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetPausabilityCall__Outputs {
  _call: SetPausabilityCall;

  constructor(call: SetPausabilityCall) {
    this._call = call;
  }
}

export class SwapCall extends ethereum.Call {
  get inputs(): SwapCall__Inputs {
    return new SwapCall__Inputs(this);
  }

  get outputs(): SwapCall__Outputs {
    return new SwapCall__Outputs(this);
  }
}

export class SwapCall__Inputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get params(): SwapCallParamsStruct {
    return changetype<SwapCallParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class SwapCall__Outputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get fixedTokenDelta(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get variableTokenDelta(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get cumulativeFeeIncurred(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }

  get fixedTokenDeltaUnbalanced(): BigInt {
    return this._call.outputValues[3].value.toBigInt();
  }

  get marginRequirement(): BigInt {
    return this._call.outputValues[4].value.toBigInt();
  }
}

export class SwapCallParamsStruct extends ethereum.Tuple {
  get recipient(): Address {
    return this[0].toAddress();
  }

  get amountSpecified(): BigInt {
    return this[1].toBigInt();
  }

  get sqrtPriceLimitX96(): BigInt {
    return this[2].toBigInt();
  }

  get tickLower(): i32 {
    return this[3].toI32();
  }

  get tickUpper(): i32 {
    return this[4].toI32();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateProtocolFeesCall extends ethereum.Call {
  get inputs(): UpdateProtocolFeesCall__Inputs {
    return new UpdateProtocolFeesCall__Inputs(this);
  }

  get outputs(): UpdateProtocolFeesCall__Outputs {
    return new UpdateProtocolFeesCall__Outputs(this);
  }
}

export class UpdateProtocolFeesCall__Inputs {
  _call: UpdateProtocolFeesCall;

  constructor(call: UpdateProtocolFeesCall) {
    this._call = call;
  }

  get protocolFeesCollected(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateProtocolFeesCall__Outputs {
  _call: UpdateProtocolFeesCall;

  constructor(call: UpdateProtocolFeesCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
