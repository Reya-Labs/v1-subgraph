// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Factory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Factory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Factory entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Factory", id.toString(), this);
    }
  }

  static load(id: string): Factory | null {
    return changetype<Factory | null>(store.get("Factory", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }
}

export class UnderlyingToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UnderlyingToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save UnderlyingToken entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("UnderlyingToken", id.toString(), this);
    }
  }

  static load(id: string): UnderlyingToken | null {
    return changetype<UnderlyingToken | null>(store.get("UnderlyingToken", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value!.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }
}

export class RateOracle extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RateOracle entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save RateOracle entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("RateOracle", id.toString(), this);
    }
  }

  static load(id: string): RateOracle | null {
    return changetype<RateOracle | null>(store.get("RateOracle", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get protocolId(): BigInt {
    let value = this.get("protocolId");
    return value!.toBigInt();
  }

  set protocolId(value: BigInt) {
    this.set("protocolId", Value.fromBigInt(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get minSecondsSinceLastUpdate(): BigInt {
    let value = this.get("minSecondsSinceLastUpdate");
    return value!.toBigInt();
  }

  set minSecondsSinceLastUpdate(value: BigInt) {
    this.set("minSecondsSinceLastUpdate", Value.fromBigInt(value));
  }

  get rateCardinalityNext(): i32 {
    let value = this.get("rateCardinalityNext");
    return value!.toI32();
  }

  set rateCardinalityNext(value: i32) {
    this.set("rateCardinalityNext", Value.fromI32(value));
  }

  get rateOracleUpdateCount(): BigInt {
    let value = this.get("rateOracleUpdateCount");
    return value!.toBigInt();
  }

  set rateOracleUpdateCount(value: BigInt) {
    this.set("rateOracleUpdateCount", Value.fromBigInt(value));
  }

  get rateUpdates(): Array<string> {
    let value = this.get("rateUpdates");
    return value!.toStringArray();
  }

  set rateUpdates(value: Array<string>) {
    this.set("rateUpdates", Value.fromStringArray(value));
  }
}

export class RateOracleUpdate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RateOracleUpdate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save RateOracleUpdate entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("RateOracleUpdate", id.toString(), this);
    }
  }

  static load(id: string): RateOracleUpdate | null {
    return changetype<RateOracleUpdate | null>(
      store.get("RateOracleUpdate", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get rateOracle(): string {
    let value = this.get("rateOracle");
    return value!.toString();
  }

  set rateOracle(value: string) {
    this.set("rateOracle", Value.fromString(value));
  }

  get updateTimestamp(): BigInt {
    let value = this.get("updateTimestamp");
    return value!.toBigInt();
  }

  set updateTimestamp(value: BigInt) {
    this.set("updateTimestamp", Value.fromBigInt(value));
  }

  get observationIndex(): i32 {
    let value = this.get("observationIndex");
    return value!.toI32();
  }

  set observationIndex(value: i32) {
    this.set("observationIndex", Value.fromI32(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get resultRay(): BigInt {
    let value = this.get("resultRay");
    return value!.toBigInt();
  }

  set resultRay(value: BigInt) {
    this.set("resultRay", Value.fromBigInt(value));
  }

  get cardinality(): i32 {
    let value = this.get("cardinality");
    return value!.toI32();
  }

  set cardinality(value: i32) {
    this.set("cardinality", Value.fromI32(value));
  }

  get cardinalityNext(): i32 {
    let value = this.get("cardinalityNext");
    return value!.toI32();
  }

  set cardinalityNext(value: i32) {
    this.set("cardinalityNext", Value.fromI32(value));
  }
}

export class MarginEngine extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MarginEngine entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save MarginEngine entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("MarginEngine", id.toString(), this);
    }
  }

  static load(id: string): MarginEngine | null {
    return changetype<MarginEngine | null>(store.get("MarginEngine", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amm(): string {
    let value = this.get("amm");
    return value!.toString();
  }

  set amm(value: string) {
    this.set("amm", Value.fromString(value));
  }

  get mcpCount(): BigInt {
    let value = this.get("mcpCount");
    return value!.toBigInt();
  }

  set mcpCount(value: BigInt) {
    this.set("mcpCount", Value.fromBigInt(value));
  }

  get marginCalculatorParameters(): string {
    let value = this.get("marginCalculatorParameters");
    return value!.toString();
  }

  set marginCalculatorParameters(value: string) {
    this.set("marginCalculatorParameters", Value.fromString(value));
  }
}

export class MarginCalculatorParameters extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save MarginCalculatorParameters entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save MarginCalculatorParameters entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("MarginCalculatorParameters", id.toString(), this);
    }
  }

  static load(id: string): MarginCalculatorParameters | null {
    return changetype<MarginCalculatorParameters | null>(
      store.get("MarginCalculatorParameters", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get apyUpperMultiplierWad(): BigInt {
    let value = this.get("apyUpperMultiplierWad");
    return value!.toBigInt();
  }

  set apyUpperMultiplierWad(value: BigInt) {
    this.set("apyUpperMultiplierWad", Value.fromBigInt(value));
  }

  get apyLowerMultiplierWad(): BigInt {
    let value = this.get("apyLowerMultiplierWad");
    return value!.toBigInt();
  }

  set apyLowerMultiplierWad(value: BigInt) {
    this.set("apyLowerMultiplierWad", Value.fromBigInt(value));
  }

  get sigmaSquaredWad(): BigInt {
    let value = this.get("sigmaSquaredWad");
    return value!.toBigInt();
  }

  set sigmaSquaredWad(value: BigInt) {
    this.set("sigmaSquaredWad", Value.fromBigInt(value));
  }

  get alphaWad(): BigInt {
    let value = this.get("alphaWad");
    return value!.toBigInt();
  }

  set alphaWad(value: BigInt) {
    this.set("alphaWad", Value.fromBigInt(value));
  }

  get betaWad(): BigInt {
    let value = this.get("betaWad");
    return value!.toBigInt();
  }

  set betaWad(value: BigInt) {
    this.set("betaWad", Value.fromBigInt(value));
  }

  get xiUpperWad(): BigInt {
    let value = this.get("xiUpperWad");
    return value!.toBigInt();
  }

  set xiUpperWad(value: BigInt) {
    this.set("xiUpperWad", Value.fromBigInt(value));
  }

  get xiLowerWad(): BigInt {
    let value = this.get("xiLowerWad");
    return value!.toBigInt();
  }

  set xiLowerWad(value: BigInt) {
    this.set("xiLowerWad", Value.fromBigInt(value));
  }

  get tMaxWad(): BigInt {
    let value = this.get("tMaxWad");
    return value!.toBigInt();
  }

  set tMaxWad(value: BigInt) {
    this.set("tMaxWad", Value.fromBigInt(value));
  }

  get devMulLeftUnwindLMWad(): BigInt {
    let value = this.get("devMulLeftUnwindLMWad");
    return value!.toBigInt();
  }

  set devMulLeftUnwindLMWad(value: BigInt) {
    this.set("devMulLeftUnwindLMWad", Value.fromBigInt(value));
  }

  get devMulRightUnwindLMWad(): BigInt {
    let value = this.get("devMulRightUnwindLMWad");
    return value!.toBigInt();
  }

  set devMulRightUnwindLMWad(value: BigInt) {
    this.set("devMulRightUnwindLMWad", Value.fromBigInt(value));
  }

  get devMulLeftUnwindIMWad(): BigInt {
    let value = this.get("devMulLeftUnwindIMWad");
    return value!.toBigInt();
  }

  set devMulLeftUnwindIMWad(value: BigInt) {
    this.set("devMulLeftUnwindIMWad", Value.fromBigInt(value));
  }

  get devMulRightUnwindIMWad(): BigInt {
    let value = this.get("devMulRightUnwindIMWad");
    return value!.toBigInt();
  }

  set devMulRightUnwindIMWad(value: BigInt) {
    this.set("devMulRightUnwindIMWad", Value.fromBigInt(value));
  }

  get fixedRateDeviationMinLeftUnwindLMWad(): BigInt {
    let value = this.get("fixedRateDeviationMinLeftUnwindLMWad");
    return value!.toBigInt();
  }

  set fixedRateDeviationMinLeftUnwindLMWad(value: BigInt) {
    this.set("fixedRateDeviationMinLeftUnwindLMWad", Value.fromBigInt(value));
  }

  get fixedRateDeviationMinRightUnwindLMWad(): BigInt {
    let value = this.get("fixedRateDeviationMinRightUnwindLMWad");
    return value!.toBigInt();
  }

  set fixedRateDeviationMinRightUnwindLMWad(value: BigInt) {
    this.set("fixedRateDeviationMinRightUnwindLMWad", Value.fromBigInt(value));
  }

  get fixedRateDeviationMinLeftUnwindIMWad(): BigInt {
    let value = this.get("fixedRateDeviationMinLeftUnwindIMWad");
    return value!.toBigInt();
  }

  set fixedRateDeviationMinLeftUnwindIMWad(value: BigInt) {
    this.set("fixedRateDeviationMinLeftUnwindIMWad", Value.fromBigInt(value));
  }

  get fixedRateDeviationMinRightUnwindIMWad(): BigInt {
    let value = this.get("fixedRateDeviationMinRightUnwindIMWad");
    return value!.toBigInt();
  }

  set fixedRateDeviationMinRightUnwindIMWad(value: BigInt) {
    this.set("fixedRateDeviationMinRightUnwindIMWad", Value.fromBigInt(value));
  }

  get gammaWad(): BigInt {
    let value = this.get("gammaWad");
    return value!.toBigInt();
  }

  set gammaWad(value: BigInt) {
    this.set("gammaWad", Value.fromBigInt(value));
  }

  get minMarginToIncentiviseLiquidators(): BigInt {
    let value = this.get("minMarginToIncentiviseLiquidators");
    return value!.toBigInt();
  }

  set minMarginToIncentiviseLiquidators(value: BigInt) {
    this.set("minMarginToIncentiviseLiquidators", Value.fromBigInt(value));
  }
}

export class FCM extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FCM entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save FCM entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("FCM", id.toString(), this);
    }
  }

  static load(id: string): FCM | null {
    return changetype<FCM | null>(store.get("FCM", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amm(): string {
    let value = this.get("amm");
    return value!.toString();
  }

  set amm(value: string) {
    this.set("amm", Value.fromString(value));
  }
}

export class AMM extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AMM entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AMM entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AMM", id.toString(), this);
    }
  }

  static load(id: string): AMM | null {
    return changetype<AMM | null>(store.get("AMM", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdTimestamp(): BigInt {
    let value = this.get("createdTimestamp");
    return value!.toBigInt();
  }

  set createdTimestamp(value: BigInt) {
    this.set("createdTimestamp", Value.fromBigInt(value));
  }

  get fcm(): string {
    let value = this.get("fcm");
    return value!.toString();
  }

  set fcm(value: string) {
    this.set("fcm", Value.fromString(value));
  }

  get marginEngine(): string {
    let value = this.get("marginEngine");
    return value!.toString();
  }

  set marginEngine(value: string) {
    this.set("marginEngine", Value.fromString(value));
  }

  get rateOracle(): string {
    let value = this.get("rateOracle");
    return value!.toString();
  }

  set rateOracle(value: string) {
    this.set("rateOracle", Value.fromString(value));
  }

  get tickSpacing(): BigInt {
    let value = this.get("tickSpacing");
    return value!.toBigInt();
  }

  set tickSpacing(value: BigInt) {
    this.set("tickSpacing", Value.fromBigInt(value));
  }

  get termStartTimestamp(): BigInt {
    let value = this.get("termStartTimestamp");
    return value!.toBigInt();
  }

  set termStartTimestamp(value: BigInt) {
    this.set("termStartTimestamp", Value.fromBigInt(value));
  }

  get termEndTimestamp(): BigInt {
    let value = this.get("termEndTimestamp");
    return value!.toBigInt();
  }

  set termEndTimestamp(value: BigInt) {
    this.set("termEndTimestamp", Value.fromBigInt(value));
  }

  get totalNotionalTraded(): BigInt {
    let value = this.get("totalNotionalTraded");
    return value!.toBigInt();
  }

  set totalNotionalTraded(value: BigInt) {
    this.set("totalNotionalTraded", Value.fromBigInt(value));
  }

  get totalLiquidity(): BigInt {
    let value = this.get("totalLiquidity");
    return value!.toBigInt();
  }

  set totalLiquidity(value: BigInt) {
    this.set("totalLiquidity", Value.fromBigInt(value));
  }

  get updatedTimestamp(): BigInt {
    let value = this.get("updatedTimestamp");
    return value!.toBigInt();
  }

  set updatedTimestamp(value: BigInt) {
    this.set("updatedTimestamp", Value.fromBigInt(value));
  }

  get tick(): BigInt {
    let value = this.get("tick");
    return value!.toBigInt();
  }

  set tick(value: BigInt) {
    this.set("tick", Value.fromBigInt(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value!.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get mints(): Array<string> {
    let value = this.get("mints");
    return value!.toStringArray();
  }

  set mints(value: Array<string>) {
    this.set("mints", Value.fromStringArray(value));
  }

  get burns(): Array<string> {
    let value = this.get("burns");
    return value!.toStringArray();
  }

  set burns(value: Array<string>) {
    this.set("burns", Value.fromStringArray(value));
  }

  get swaps(): Array<string> {
    let value = this.get("swaps");
    return value!.toStringArray();
  }

  set swaps(value: Array<string>) {
    this.set("swaps", Value.fromStringArray(value));
  }

  get marginUpdates(): Array<string> {
    let value = this.get("marginUpdates");
    return value!.toStringArray();
  }

  set marginUpdates(value: Array<string>) {
    this.set("marginUpdates", Value.fromStringArray(value));
  }

  get liquidations(): Array<string> {
    let value = this.get("liquidations");
    return value!.toStringArray();
  }

  set liquidations(value: Array<string>) {
    this.set("liquidations", Value.fromStringArray(value));
  }

  get settlements(): Array<string> {
    let value = this.get("settlements");
    return value!.toStringArray();
  }

  set settlements(value: Array<string>) {
    this.set("settlements", Value.fromStringArray(value));
  }
}

export class Wallet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Wallet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Wallet entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Wallet", id.toString(), this);
    }
  }

  static load(id: string): Wallet | null {
    return changetype<Wallet | null>(store.get("Wallet", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get positions(): Array<string> {
    let value = this.get("positions");
    return value!.toStringArray();
  }

  set positions(value: Array<string>) {
    this.set("positions", Value.fromStringArray(value));
  }

  get positionCount(): BigInt {
    let value = this.get("positionCount");
    return value!.toBigInt();
  }

  set positionCount(value: BigInt) {
    this.set("positionCount", Value.fromBigInt(value));
  }

  get fcmPositions(): Array<string> {
    let value = this.get("fcmPositions");
    return value!.toStringArray();
  }

  set fcmPositions(value: Array<string>) {
    this.set("fcmPositions", Value.fromStringArray(value));
  }

  get fcmPositionCount(): BigInt {
    let value = this.get("fcmPositionCount");
    return value!.toBigInt();
  }

  set fcmPositionCount(value: BigInt) {
    this.set("fcmPositionCount", Value.fromBigInt(value));
  }
}

export class Position extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Position entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Position entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Position", id.toString(), this);
    }
  }

  static load(id: string): Position | null {
    return changetype<Position | null>(store.get("Position", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdTimestamp(): BigInt {
    let value = this.get("createdTimestamp");
    return value!.toBigInt();
  }

  set createdTimestamp(value: BigInt) {
    this.set("createdTimestamp", Value.fromBigInt(value));
  }

  get amm(): string {
    let value = this.get("amm");
    return value!.toString();
  }

  set amm(value: string) {
    this.set("amm", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get tickLower(): BigInt {
    let value = this.get("tickLower");
    return value!.toBigInt();
  }

  set tickLower(value: BigInt) {
    this.set("tickLower", Value.fromBigInt(value));
  }

  get tickUpper(): BigInt {
    let value = this.get("tickUpper");
    return value!.toBigInt();
  }

  set tickUpper(value: BigInt) {
    this.set("tickUpper", Value.fromBigInt(value));
  }

  get updatedTimestamp(): BigInt {
    let value = this.get("updatedTimestamp");
    return value!.toBigInt();
  }

  set updatedTimestamp(value: BigInt) {
    this.set("updatedTimestamp", Value.fromBigInt(value));
  }

  get liquidity(): BigInt {
    let value = this.get("liquidity");
    return value!.toBigInt();
  }

  set liquidity(value: BigInt) {
    this.set("liquidity", Value.fromBigInt(value));
  }

  get margin(): BigInt {
    let value = this.get("margin");
    return value!.toBigInt();
  }

  set margin(value: BigInt) {
    this.set("margin", Value.fromBigInt(value));
  }

  get fixedTokenBalance(): BigInt {
    let value = this.get("fixedTokenBalance");
    return value!.toBigInt();
  }

  set fixedTokenBalance(value: BigInt) {
    this.set("fixedTokenBalance", Value.fromBigInt(value));
  }

  get variableTokenBalance(): BigInt {
    let value = this.get("variableTokenBalance");
    return value!.toBigInt();
  }

  set variableTokenBalance(value: BigInt) {
    this.set("variableTokenBalance", Value.fromBigInt(value));
  }

  get accumulatedFees(): BigInt {
    let value = this.get("accumulatedFees");
    return value!.toBigInt();
  }

  set accumulatedFees(value: BigInt) {
    this.set("accumulatedFees", Value.fromBigInt(value));
  }

  get totalNotionalTraded(): BigInt {
    let value = this.get("totalNotionalTraded");
    return value!.toBigInt();
  }

  set totalNotionalTraded(value: BigInt) {
    this.set("totalNotionalTraded", Value.fromBigInt(value));
  }

  get sumOfWeightedFixedRate(): BigInt {
    let value = this.get("sumOfWeightedFixedRate");
    return value!.toBigInt();
  }

  set sumOfWeightedFixedRate(value: BigInt) {
    this.set("sumOfWeightedFixedRate", Value.fromBigInt(value));
  }

  get positionType(): BigInt {
    let value = this.get("positionType");
    return value!.toBigInt();
  }

  set positionType(value: BigInt) {
    this.set("positionType", Value.fromBigInt(value));
  }

  get isSettled(): boolean {
    let value = this.get("isSettled");
    return value!.toBoolean();
  }

  set isSettled(value: boolean) {
    this.set("isSettled", Value.fromBoolean(value));
  }

  get mints(): Array<string> {
    let value = this.get("mints");
    return value!.toStringArray();
  }

  set mints(value: Array<string>) {
    this.set("mints", Value.fromStringArray(value));
  }

  get burns(): Array<string> {
    let value = this.get("burns");
    return value!.toStringArray();
  }

  set burns(value: Array<string>) {
    this.set("burns", Value.fromStringArray(value));
  }

  get swaps(): Array<string> {
    let value = this.get("swaps");
    return value!.toStringArray();
  }

  set swaps(value: Array<string>) {
    this.set("swaps", Value.fromStringArray(value));
  }

  get marginUpdates(): Array<string> {
    let value = this.get("marginUpdates");
    return value!.toStringArray();
  }

  set marginUpdates(value: Array<string>) {
    this.set("marginUpdates", Value.fromStringArray(value));
  }

  get liquidations(): Array<string> {
    let value = this.get("liquidations");
    return value!.toStringArray();
  }

  set liquidations(value: Array<string>) {
    this.set("liquidations", Value.fromStringArray(value));
  }

  get settlements(): Array<string> {
    let value = this.get("settlements");
    return value!.toStringArray();
  }

  set settlements(value: Array<string>) {
    this.set("settlements", Value.fromStringArray(value));
  }

  get snapshots(): Array<string> {
    let value = this.get("snapshots");
    return value!.toStringArray();
  }

  set snapshots(value: Array<string>) {
    this.set("snapshots", Value.fromStringArray(value));
  }

  get snapshotCount(): BigInt {
    let value = this.get("snapshotCount");
    return value!.toBigInt();
  }

  set snapshotCount(value: BigInt) {
    this.set("snapshotCount", Value.fromBigInt(value));
  }
}

export class PositionSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PositionSnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PositionSnapshot entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PositionSnapshot", id.toString(), this);
    }
  }

  static load(id: string): PositionSnapshot | null {
    return changetype<PositionSnapshot | null>(
      store.get("PositionSnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdTimestamp(): BigInt {
    let value = this.get("createdTimestamp");
    return value!.toBigInt();
  }

  set createdTimestamp(value: BigInt) {
    this.set("createdTimestamp", Value.fromBigInt(value));
  }

  get position(): string {
    let value = this.get("position");
    return value!.toString();
  }

  set position(value: string) {
    this.set("position", Value.fromString(value));
  }

  get liquidity(): BigInt {
    let value = this.get("liquidity");
    return value!.toBigInt();
  }

  set liquidity(value: BigInt) {
    this.set("liquidity", Value.fromBigInt(value));
  }

  get margin(): BigInt {
    let value = this.get("margin");
    return value!.toBigInt();
  }

  set margin(value: BigInt) {
    this.set("margin", Value.fromBigInt(value));
  }

  get fixedTokenBalance(): BigInt {
    let value = this.get("fixedTokenBalance");
    return value!.toBigInt();
  }

  set fixedTokenBalance(value: BigInt) {
    this.set("fixedTokenBalance", Value.fromBigInt(value));
  }

  get variableTokenBalance(): BigInt {
    let value = this.get("variableTokenBalance");
    return value!.toBigInt();
  }

  set variableTokenBalance(value: BigInt) {
    this.set("variableTokenBalance", Value.fromBigInt(value));
  }

  get accumulatedFees(): BigInt {
    let value = this.get("accumulatedFees");
    return value!.toBigInt();
  }

  set accumulatedFees(value: BigInt) {
    this.set("accumulatedFees", Value.fromBigInt(value));
  }

  get totalNotionalTraded(): BigInt {
    let value = this.get("totalNotionalTraded");
    return value!.toBigInt();
  }

  set totalNotionalTraded(value: BigInt) {
    this.set("totalNotionalTraded", Value.fromBigInt(value));
  }

  get sumOfWeightedFixedRate(): BigInt {
    let value = this.get("sumOfWeightedFixedRate");
    return value!.toBigInt();
  }

  set sumOfWeightedFixedRate(value: BigInt) {
    this.set("sumOfWeightedFixedRate", Value.fromBigInt(value));
  }

  get positionType(): BigInt {
    let value = this.get("positionType");
    return value!.toBigInt();
  }

  set positionType(value: BigInt) {
    this.set("positionType", Value.fromBigInt(value));
  }

  get isSettled(): boolean {
    let value = this.get("isSettled");
    return value!.toBoolean();
  }

  set isSettled(value: boolean) {
    this.set("isSettled", Value.fromBoolean(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Transaction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amm(): string {
    let value = this.get("amm");
    return value!.toString();
  }

  set amm(value: string) {
    this.set("amm", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get createdTimestamp(): BigInt {
    let value = this.get("createdTimestamp");
    return value!.toBigInt();
  }

  set createdTimestamp(value: BigInt) {
    this.set("createdTimestamp", Value.fromBigInt(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value!.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get mints(): Array<string> {
    let value = this.get("mints");
    return value!.toStringArray();
  }

  set mints(value: Array<string>) {
    this.set("mints", Value.fromStringArray(value));
  }

  get burns(): Array<string> {
    let value = this.get("burns");
    return value!.toStringArray();
  }

  set burns(value: Array<string>) {
    this.set("burns", Value.fromStringArray(value));
  }

  get swaps(): Array<string> {
    let value = this.get("swaps");
    return value!.toStringArray();
  }

  set swaps(value: Array<string>) {
    this.set("swaps", Value.fromStringArray(value));
  }

  get marginUpdates(): Array<string> {
    let value = this.get("marginUpdates");
    return value!.toStringArray();
  }

  set marginUpdates(value: Array<string>) {
    this.set("marginUpdates", Value.fromStringArray(value));
  }

  get liquidations(): Array<string> {
    let value = this.get("liquidations");
    return value!.toStringArray();
  }

  set liquidations(value: Array<string>) {
    this.set("liquidations", Value.fromStringArray(value));
  }

  get settlements(): Array<string> {
    let value = this.get("settlements");
    return value!.toStringArray();
  }

  set settlements(value: Array<string>) {
    this.set("settlements", Value.fromStringArray(value));
  }
}

export class Mint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Mint entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Mint entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Mint", id.toString(), this);
    }
  }

  static load(id: string): Mint | null {
    return changetype<Mint | null>(store.get("Mint", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get amm(): string {
    let value = this.get("amm");
    return value!.toString();
  }

  set amm(value: string) {
    this.set("amm", Value.fromString(value));
  }

  get position(): string {
    let value = this.get("position");
    return value!.toString();
  }

  set position(value: string) {
    this.set("position", Value.fromString(value));
  }

  get sender(): string {
    let value = this.get("sender");
    return value!.toString();
  }

  set sender(value: string) {
    this.set("sender", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class Burn extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Burn entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Burn entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Burn", id.toString(), this);
    }
  }

  static load(id: string): Burn | null {
    return changetype<Burn | null>(store.get("Burn", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get amm(): string {
    let value = this.get("amm");
    return value!.toString();
  }

  set amm(value: string) {
    this.set("amm", Value.fromString(value));
  }

  get position(): string {
    let value = this.get("position");
    return value!.toString();
  }

  set position(value: string) {
    this.set("position", Value.fromString(value));
  }

  get sender(): string {
    let value = this.get("sender");
    return value!.toString();
  }

  set sender(value: string) {
    this.set("sender", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class Swap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Swap entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Swap entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Swap", id.toString(), this);
    }
  }

  static load(id: string): Swap | null {
    return changetype<Swap | null>(store.get("Swap", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get amm(): string {
    let value = this.get("amm");
    return value!.toString();
  }

  set amm(value: string) {
    this.set("amm", Value.fromString(value));
  }

  get position(): string {
    let value = this.get("position");
    return value!.toString();
  }

  set position(value: string) {
    this.set("position", Value.fromString(value));
  }

  get sender(): string {
    let value = this.get("sender");
    return value!.toString();
  }

  set sender(value: string) {
    this.set("sender", Value.fromString(value));
  }

  get desiredNotional(): BigInt {
    let value = this.get("desiredNotional");
    return value!.toBigInt();
  }

  set desiredNotional(value: BigInt) {
    this.set("desiredNotional", Value.fromBigInt(value));
  }

  get sqrtPriceLimitX96(): BigInt {
    let value = this.get("sqrtPriceLimitX96");
    return value!.toBigInt();
  }

  set sqrtPriceLimitX96(value: BigInt) {
    this.set("sqrtPriceLimitX96", Value.fromBigInt(value));
  }

  get cumulativeFeeIncurred(): BigInt {
    let value = this.get("cumulativeFeeIncurred");
    return value!.toBigInt();
  }

  set cumulativeFeeIncurred(value: BigInt) {
    this.set("cumulativeFeeIncurred", Value.fromBigInt(value));
  }

  get fixedTokenDelta(): BigInt {
    let value = this.get("fixedTokenDelta");
    return value!.toBigInt();
  }

  set fixedTokenDelta(value: BigInt) {
    this.set("fixedTokenDelta", Value.fromBigInt(value));
  }

  get variableTokenDelta(): BigInt {
    let value = this.get("variableTokenDelta");
    return value!.toBigInt();
  }

  set variableTokenDelta(value: BigInt) {
    this.set("variableTokenDelta", Value.fromBigInt(value));
  }

  get fixedTokenDeltaUnbalanced(): BigInt {
    let value = this.get("fixedTokenDeltaUnbalanced");
    return value!.toBigInt();
  }

  set fixedTokenDeltaUnbalanced(value: BigInt) {
    this.set("fixedTokenDeltaUnbalanced", Value.fromBigInt(value));
  }
}

export class Liquidation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Liquidation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Liquidation entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Liquidation", id.toString(), this);
    }
  }

  static load(id: string): Liquidation | null {
    return changetype<Liquidation | null>(store.get("Liquidation", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get amm(): string {
    let value = this.get("amm");
    return value!.toString();
  }

  set amm(value: string) {
    this.set("amm", Value.fromString(value));
  }

  get position(): string {
    let value = this.get("position");
    return value!.toString();
  }

  set position(value: string) {
    this.set("position", Value.fromString(value));
  }

  get liquidator(): string {
    let value = this.get("liquidator");
    return value!.toString();
  }

  set liquidator(value: string) {
    this.set("liquidator", Value.fromString(value));
  }

  get reward(): BigInt {
    let value = this.get("reward");
    return value!.toBigInt();
  }

  set reward(value: BigInt) {
    this.set("reward", Value.fromBigInt(value));
  }

  get notionalUnwound(): BigInt {
    let value = this.get("notionalUnwound");
    return value!.toBigInt();
  }

  set notionalUnwound(value: BigInt) {
    this.set("notionalUnwound", Value.fromBigInt(value));
  }
}

export class Settlement extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Settlement entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Settlement entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Settlement", id.toString(), this);
    }
  }

  static load(id: string): Settlement | null {
    return changetype<Settlement | null>(store.get("Settlement", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get amm(): string {
    let value = this.get("amm");
    return value!.toString();
  }

  set amm(value: string) {
    this.set("amm", Value.fromString(value));
  }

  get position(): string {
    let value = this.get("position");
    return value!.toString();
  }

  set position(value: string) {
    this.set("position", Value.fromString(value));
  }

  get settlementCashflow(): BigInt {
    let value = this.get("settlementCashflow");
    return value!.toBigInt();
  }

  set settlementCashflow(value: BigInt) {
    this.set("settlementCashflow", Value.fromBigInt(value));
  }
}

export class MarginUpdate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MarginUpdate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save MarginUpdate entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("MarginUpdate", id.toString(), this);
    }
  }

  static load(id: string): MarginUpdate | null {
    return changetype<MarginUpdate | null>(store.get("MarginUpdate", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get amm(): string {
    let value = this.get("amm");
    return value!.toString();
  }

  set amm(value: string) {
    this.set("amm", Value.fromString(value));
  }

  get position(): string {
    let value = this.get("position");
    return value!.toString();
  }

  set position(value: string) {
    this.set("position", Value.fromString(value));
  }

  get depositer(): string {
    let value = this.get("depositer");
    return value!.toString();
  }

  set depositer(value: string) {
    this.set("depositer", Value.fromString(value));
  }

  get marginDelta(): BigInt {
    let value = this.get("marginDelta");
    return value!.toBigInt();
  }

  set marginDelta(value: BigInt) {
    this.set("marginDelta", Value.fromBigInt(value));
  }
}

export class FCMPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FCMPosition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save FCMPosition entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("FCMPosition", id.toString(), this);
    }
  }

  static load(id: string): FCMPosition | null {
    return changetype<FCMPosition | null>(store.get("FCMPosition", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdTimestamp(): BigInt {
    let value = this.get("createdTimestamp");
    return value!.toBigInt();
  }

  set createdTimestamp(value: BigInt) {
    this.set("createdTimestamp", Value.fromBigInt(value));
  }

  get amm(): string {
    let value = this.get("amm");
    return value!.toString();
  }

  set amm(value: string) {
    this.set("amm", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get updatedTimestamp(): BigInt {
    let value = this.get("updatedTimestamp");
    return value!.toBigInt();
  }

  set updatedTimestamp(value: BigInt) {
    this.set("updatedTimestamp", Value.fromBigInt(value));
  }

  get fixedTokenBalance(): BigInt {
    let value = this.get("fixedTokenBalance");
    return value!.toBigInt();
  }

  set fixedTokenBalance(value: BigInt) {
    this.set("fixedTokenBalance", Value.fromBigInt(value));
  }

  get variableTokenBalance(): BigInt {
    let value = this.get("variableTokenBalance");
    return value!.toBigInt();
  }

  set variableTokenBalance(value: BigInt) {
    this.set("variableTokenBalance", Value.fromBigInt(value));
  }

  get marginInScaledYieldBearingTokens(): BigInt {
    let value = this.get("marginInScaledYieldBearingTokens");
    return value!.toBigInt();
  }

  set marginInScaledYieldBearingTokens(value: BigInt) {
    this.set("marginInScaledYieldBearingTokens", Value.fromBigInt(value));
  }

  get totalNotionalTraded(): BigInt {
    let value = this.get("totalNotionalTraded");
    return value!.toBigInt();
  }

  set totalNotionalTraded(value: BigInt) {
    this.set("totalNotionalTraded", Value.fromBigInt(value));
  }

  get sumOfWeightedFixedRate(): BigInt {
    let value = this.get("sumOfWeightedFixedRate");
    return value!.toBigInt();
  }

  set sumOfWeightedFixedRate(value: BigInt) {
    this.set("sumOfWeightedFixedRate", Value.fromBigInt(value));
  }

  get isSettled(): boolean {
    let value = this.get("isSettled");
    return value!.toBoolean();
  }

  set isSettled(value: boolean) {
    this.set("isSettled", Value.fromBoolean(value));
  }

  get fcmSwaps(): Array<string> {
    let value = this.get("fcmSwaps");
    return value!.toStringArray();
  }

  set fcmSwaps(value: Array<string>) {
    this.set("fcmSwaps", Value.fromStringArray(value));
  }

  get fcmUnwinds(): Array<string> {
    let value = this.get("fcmUnwinds");
    return value!.toStringArray();
  }

  set fcmUnwinds(value: Array<string>) {
    this.set("fcmUnwinds", Value.fromStringArray(value));
  }

  get fcmSettlements(): Array<string> {
    let value = this.get("fcmSettlements");
    return value!.toStringArray();
  }

  set fcmSettlements(value: Array<string>) {
    this.set("fcmSettlements", Value.fromStringArray(value));
  }

  get snapshots(): Array<string> {
    let value = this.get("snapshots");
    return value!.toStringArray();
  }

  set snapshots(value: Array<string>) {
    this.set("snapshots", Value.fromStringArray(value));
  }

  get snapshotCount(): BigInt {
    let value = this.get("snapshotCount");
    return value!.toBigInt();
  }

  set snapshotCount(value: BigInt) {
    this.set("snapshotCount", Value.fromBigInt(value));
  }
}

export class FCMPositionSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FCMPositionSnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save FCMPositionSnapshot entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("FCMPositionSnapshot", id.toString(), this);
    }
  }

  static load(id: string): FCMPositionSnapshot | null {
    return changetype<FCMPositionSnapshot | null>(
      store.get("FCMPositionSnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdTimestamp(): BigInt {
    let value = this.get("createdTimestamp");
    return value!.toBigInt();
  }

  set createdTimestamp(value: BigInt) {
    this.set("createdTimestamp", Value.fromBigInt(value));
  }

  get fcmPosition(): string {
    let value = this.get("fcmPosition");
    return value!.toString();
  }

  set fcmPosition(value: string) {
    this.set("fcmPosition", Value.fromString(value));
  }

  get fixedTokenBalance(): BigInt {
    let value = this.get("fixedTokenBalance");
    return value!.toBigInt();
  }

  set fixedTokenBalance(value: BigInt) {
    this.set("fixedTokenBalance", Value.fromBigInt(value));
  }

  get variableTokenBalance(): BigInt {
    let value = this.get("variableTokenBalance");
    return value!.toBigInt();
  }

  set variableTokenBalance(value: BigInt) {
    this.set("variableTokenBalance", Value.fromBigInt(value));
  }

  get marginInScaledYieldBearingTokens(): BigInt {
    let value = this.get("marginInScaledYieldBearingTokens");
    return value!.toBigInt();
  }

  set marginInScaledYieldBearingTokens(value: BigInt) {
    this.set("marginInScaledYieldBearingTokens", Value.fromBigInt(value));
  }

  get totalNotionalTraded(): BigInt {
    let value = this.get("totalNotionalTraded");
    return value!.toBigInt();
  }

  set totalNotionalTraded(value: BigInt) {
    this.set("totalNotionalTraded", Value.fromBigInt(value));
  }

  get sumOfWeightedFixedRate(): BigInt {
    let value = this.get("sumOfWeightedFixedRate");
    return value!.toBigInt();
  }

  set sumOfWeightedFixedRate(value: BigInt) {
    this.set("sumOfWeightedFixedRate", Value.fromBigInt(value));
  }

  get isSettled(): boolean {
    let value = this.get("isSettled");
    return value!.toBoolean();
  }

  set isSettled(value: boolean) {
    this.set("isSettled", Value.fromBoolean(value));
  }
}

export class FCMSwap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FCMSwap entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save FCMSwap entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("FCMSwap", id.toString(), this);
    }
  }

  static load(id: string): FCMSwap | null {
    return changetype<FCMSwap | null>(store.get("FCMSwap", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get amm(): string {
    let value = this.get("amm");
    return value!.toString();
  }

  set amm(value: string) {
    this.set("amm", Value.fromString(value));
  }

  get fcmPosition(): string {
    let value = this.get("fcmPosition");
    return value!.toString();
  }

  set fcmPosition(value: string) {
    this.set("fcmPosition", Value.fromString(value));
  }

  get desiredNotional(): BigInt {
    let value = this.get("desiredNotional");
    return value!.toBigInt();
  }

  set desiredNotional(value: BigInt) {
    this.set("desiredNotional", Value.fromBigInt(value));
  }

  get sqrtPriceLimitX96(): BigInt {
    let value = this.get("sqrtPriceLimitX96");
    return value!.toBigInt();
  }

  set sqrtPriceLimitX96(value: BigInt) {
    this.set("sqrtPriceLimitX96", Value.fromBigInt(value));
  }

  get cumulativeFeeIncurred(): BigInt {
    let value = this.get("cumulativeFeeIncurred");
    return value!.toBigInt();
  }

  set cumulativeFeeIncurred(value: BigInt) {
    this.set("cumulativeFeeIncurred", Value.fromBigInt(value));
  }

  get fixedTokenDelta(): BigInt {
    let value = this.get("fixedTokenDelta");
    return value!.toBigInt();
  }

  set fixedTokenDelta(value: BigInt) {
    this.set("fixedTokenDelta", Value.fromBigInt(value));
  }

  get variableTokenDelta(): BigInt {
    let value = this.get("variableTokenDelta");
    return value!.toBigInt();
  }

  set variableTokenDelta(value: BigInt) {
    this.set("variableTokenDelta", Value.fromBigInt(value));
  }

  get fixedTokenDeltaUnbalanced(): BigInt {
    let value = this.get("fixedTokenDeltaUnbalanced");
    return value!.toBigInt();
  }

  set fixedTokenDeltaUnbalanced(value: BigInt) {
    this.set("fixedTokenDeltaUnbalanced", Value.fromBigInt(value));
  }
}

export class FCMUnwind extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FCMUnwind entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save FCMUnwind entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("FCMUnwind", id.toString(), this);
    }
  }

  static load(id: string): FCMUnwind | null {
    return changetype<FCMUnwind | null>(store.get("FCMUnwind", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get amm(): string {
    let value = this.get("amm");
    return value!.toString();
  }

  set amm(value: string) {
    this.set("amm", Value.fromString(value));
  }

  get fcmPosition(): string {
    let value = this.get("fcmPosition");
    return value!.toString();
  }

  set fcmPosition(value: string) {
    this.set("fcmPosition", Value.fromString(value));
  }

  get desiredNotional(): BigInt {
    let value = this.get("desiredNotional");
    return value!.toBigInt();
  }

  set desiredNotional(value: BigInt) {
    this.set("desiredNotional", Value.fromBigInt(value));
  }

  get sqrtPriceLimitX96(): BigInt {
    let value = this.get("sqrtPriceLimitX96");
    return value!.toBigInt();
  }

  set sqrtPriceLimitX96(value: BigInt) {
    this.set("sqrtPriceLimitX96", Value.fromBigInt(value));
  }

  get cumulativeFeeIncurred(): BigInt {
    let value = this.get("cumulativeFeeIncurred");
    return value!.toBigInt();
  }

  set cumulativeFeeIncurred(value: BigInt) {
    this.set("cumulativeFeeIncurred", Value.fromBigInt(value));
  }

  get fixedTokenDelta(): BigInt {
    let value = this.get("fixedTokenDelta");
    return value!.toBigInt();
  }

  set fixedTokenDelta(value: BigInt) {
    this.set("fixedTokenDelta", Value.fromBigInt(value));
  }

  get variableTokenDelta(): BigInt {
    let value = this.get("variableTokenDelta");
    return value!.toBigInt();
  }

  set variableTokenDelta(value: BigInt) {
    this.set("variableTokenDelta", Value.fromBigInt(value));
  }

  get fixedTokenDeltaUnbalanced(): BigInt {
    let value = this.get("fixedTokenDeltaUnbalanced");
    return value!.toBigInt();
  }

  set fixedTokenDeltaUnbalanced(value: BigInt) {
    this.set("fixedTokenDeltaUnbalanced", Value.fromBigInt(value));
  }
}

export class FCMSettlement extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FCMSettlement entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save FCMSettlement entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("FCMSettlement", id.toString(), this);
    }
  }

  static load(id: string): FCMSettlement | null {
    return changetype<FCMSettlement | null>(store.get("FCMSettlement", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get amm(): string {
    let value = this.get("amm");
    return value!.toString();
  }

  set amm(value: string) {
    this.set("amm", Value.fromString(value));
  }

  get fcmPosition(): string {
    let value = this.get("fcmPosition");
    return value!.toString();
  }

  set fcmPosition(value: string) {
    this.set("fcmPosition", Value.fromString(value));
  }

  get settlementCashflow(): BigInt {
    let value = this.get("settlementCashflow");
    return value!.toBigInt();
  }

  set settlementCashflow(value: BigInt) {
    this.set("settlementCashflow", Value.fromBigInt(value));
  }
}
